use std::collections::HashMap;

#[derive(Clone,Debug)]
pub struct BlowupCard {
    pub id: usize,
    pub theme: CardType,
    pub non_genre: Option<String>,
    pub genre: Option<String>,
    pub crop: [([f64; 2], [f64; 2]); 2],
}

#[derive(Clone,Debug,PartialEq)]
pub enum CardType {
    Normal(usize, usize), //page_i,index
    Rotatable(usize, usize, usize, usize), //(normal_page_i,normal_index,rotate_page_index,rotate_index)
}
fn sprite_config(ct: CardType) -> [([f64; 2], [f64; 2]); 2] {
    let portrait_info = SpriteInfo {
        first: (90.0, 2130.0),
        num_in_row: 3.0,
        w_h: (510.0, 675.0),
        pad: (10.0, 10.0, 0.0, 0.0),
    };
    let landscape_info = SpriteInfo {
        first: (100.0, 1610.0),
        num_in_row: 3.0,
        w_h: (675.0, 480.0),
        pad: (0.0, 0.0, 0.0, 30.0),
    };
    match ct {
        CardType::Normal(_, index) => {
            [portrait_info.src_rect(index as f64), portrait_info.src_rect(index as f64)]
        }
        CardType::Rotatable(_, index, _, index2) => {
            [portrait_info.src_rect(index as f64), landscape_info.src_rect(index2 as f64)]
        }
    }
}
macro_rules! blowupcard_map {
    ($(($id:expr,$theme:expr,$non_genre:expr,$genre:expr)),* $(,)*) => {{
  let cards: HashMap<usize,BlowupCard> =[
        $(($id,BlowupCard{
                  id:$id,
                  theme:$theme,
                  non_genre:$non_genre,
                  genre:$genre,
                  crop:sprite_config($theme),
             }),)*
               ].iter().cloned().collect();
               cards
    }}
}
#[cfg(feature = "english")]
pub fn populate() -> HashMap<usize, BlowupCard> {
    blowupcard_map!{
       (0,CardType::Normal(0,0),None,None),
       (1,CardType::Normal(0,1),None,None),
       (2,CardType::Normal(0,2),None,None),
       (3,CardType::Normal(0,3),None,None),
       (4,CardType::Normal(0,4),None,None),
       (5,CardType::Normal(0,5),None,None),
       (6,CardType::Normal(0,6),None,None),
       (7,CardType::Normal(0,7),None,None),
       (8,CardType::Normal(0,8),None,None),
       (9,CardType::Normal(1,0),None,None),
       (10,CardType::Normal(1,1),None,None),
       (11,CardType::Normal(1,2),None,None),
       (12,CardType::Normal(1,3),None,None),
       (13,CardType::Normal(1,4),None,None),
       (14,CardType::Normal(1,5),None,Some("2 coins for each adventure card".to_owned())),
       (15,CardType::Normal(1,6),None,None),
       (16,CardType::Normal(1,7),None,None),
       (18,CardType::Normal(2,0),None,None),
       (19,CardType::Normal(2,1),None,None),
       (20,CardType::Normal(2,2),None,None),
       (21,CardType::Normal(2,3),None,None),
       (22,CardType::Normal(2,4),None,None),
       (23,CardType::Normal(2,5),None,None),
       (24,CardType::Normal(2,6),None,None),
       (25,CardType::Normal(2,7),None,None),
       (26,CardType::Normal(2,8),None,None),
       (27,CardType::Rotatable(3,0,22,6),None,None),
       (28,CardType::Normal(3,1),None,None),
       (29,CardType::Rotatable(3,2,22,0),None,None),
       (30,CardType::Normal(3,3),None,None),
       (31,CardType::Rotatable(3,4,22,4),None,None),
       (32,CardType::Normal(3,5),None,None),
       (33,CardType::Rotatable(3,6,22,8),None,None),
       (34,CardType::Normal(3,7),None,None), //end of adventure
       (35,CardType::Normal(3,8),None,None),
       (36,CardType::Normal(4,0),None,None),
       (37,CardType::Normal(4,1),None,None),
       (38,CardType::Normal(4,2),None,None),
       (39,CardType::Normal(4,3),None,None),
       (40,CardType::Normal(4,4),None,None),
       (41,CardType::Normal(4,5),None,Some("All other player minus one ink".to_owned())),
       (42,CardType::Normal(4,6),None,None),
       (43,CardType::Normal(4,7),None,None),
       (44,CardType::Normal(4,8),None,None),
       (45,CardType::Normal(5,0),None,None),
       (46,CardType::Normal(5,1),None,None),
       (47,CardType::Normal(5,2),None,None),
       (48,CardType::Normal(5,3),None,None),
       (49,CardType::Normal(5,4),None,None),
       (50,CardType::Normal(5,5),None,None),
       (51,CardType::Normal(5,6),None,None),
       (52,CardType::Normal(5,7),None,None),
       (53,CardType::Normal(5,8),None,None),
       (54,CardType::Normal(6,0),None,None),
       (55,CardType::Normal(6,1),None,None),
       (56,CardType::Normal(6,2),None,None),
       (57,CardType::Normal(6,3),None,None),
       (58,CardType::Normal(6,4),None,None),
       (59,CardType::Normal(6,5),None,None),
       (60,CardType::Rotatable(6,6,23,8),None,None),
       (61,CardType::Normal(6,7),None,None),
       (62,CardType::Normal(6,8),None,None),
       (63,CardType::Normal(7,0),None,None),
       (64,CardType::Rotatable(7,1,24,3),None,None),
       (65,CardType::Normal(7,2),None,None),
       (66,CardType::Normal(7,3),None,None),
       (67,CardType::Rotatable(7,4,24,4),None,None),
       (68,CardType::Rotatable(7,5,24,1),None,None),
       (69,CardType::Normal(7,6),None,None),
       (70,CardType::Normal(7,7),Some("Lock up an offer card".to_owned()),None),
       (71,CardType::Normal(7,8),Some("Uncover adjacent cards".to_owned()),None),
       (72,CardType::Normal(8,0),None,Some("Lock up an offer card".to_owned())),
       (73,CardType::Normal(8,1),Some("Uncover adjacent cards".to_owned()),None),
       (74,CardType::Normal(8,2),None,Some("Lock up an offer card".to_owned())),
       (75,CardType::Normal(8,3),None,Some("Uncover adjacent cards".to_owned())),
       (76,CardType::Normal(8,4),Some("Lock up an offer card".to_owned()),None),
       (77,CardType::Normal(8,5),Some("Uncover adjacent cards".to_owned()),None),
       (78,CardType::Normal(8,6),Some("Uncover adjacent cards".to_owned()),None),
       (79,CardType::Normal(8,7),None,Some("Uncover adjacent cards".to_owned())),
       (80,CardType::Normal(8,8),None,Some("Uncover adjacent cards".to_owned())),
       (81,CardType::Normal(9,0),Some("Uncover adjacent cards".to_owned()),None),
       (82,CardType::Normal(9,1),None,Some("Gain 1 vp for each wild card".to_owned())),
       (83,CardType::Normal(9,2),Some("Lock up an offer card".to_owned()),None),
       (84,CardType::Normal(9,3),Some("Uncover adjacent cards".to_owned()),None),
       (85,CardType::Normal(9,4),None,Some("Uncover adjacent cards".to_owned())),
       (86,CardType::Normal(9,5),None,Some("Uncover adjacent cards".to_owned())),
       (87,CardType::Normal(9,6),Some("Lock up an offer card".to_owned()),None),
       (88,CardType::Normal(9,7),Some("Uncover adjacent cards".to_owned()),None),
       (89,CardType::Normal(9,8),None,Some("Uncover adjacent cards".to_owned())),
       (90,CardType::Normal(10,0),Some("Uncover adjacent cards".to_owned()),None),
       (91,CardType::Normal(10,1),None,Some("Uncover adjacent cards".to_owned())),
       (92,CardType::Normal(10,2),Some("Lock up an offer card".to_owned()),None),
       (93,CardType::Normal(10,3),None,Some("Uncover adjacent cards".to_owned())),
       (94,CardType::Normal(10,4),None,Some("Uncover adjacent cards".to_owned())),
       (95,CardType::Normal(10,5),None,Some("Lock up an offer card".to_owned())),
       (96,CardType::Rotatable(10,6,25,8),None,None),
       (97,CardType::Rotatable(10,7,25,5),Some("Lock up an offer card".to_owned()),None),
       (98,CardType::Rotatable(10,8,25,2),None,Some("Lock up an offer card".to_owned())),
       (99,CardType::Normal(11,0),Some("Uncover adjacent cards".to_owned()),None),
       (100,CardType::Normal(11,1),Some("Uncover adjacent cards".to_owned()),None),
       (101,CardType::Rotatable(11,2,26,0),None,Some("Lock up an offer card".to_owned())),
       (102,CardType::Normal(11,3),Some("Uncover adjacent cards".to_owned()),Some("Lock up an offer card".to_owned())),
       (103,CardType::Normal(11,4),None,Some("Lock up an offer card".to_owned())),
       (104,CardType::Normal(11,5),Some("Uncover adjacent cards".to_owned()),None),
       (105,CardType::Normal(11,6),Some("Double adjacent cards".to_owned()),None),
       (106,CardType::Normal(11,7),Some("Trash another card in hand for 1 coin".to_owned()),Some("Double adjacent cards".to_owned())),
       (107,CardType::Normal(11,8),None,Some("Trash another card in hand for 1 coin".to_owned())),
       (108,CardType::Normal(12,0),None,Some("Double adjacent cards".to_owned())),
       (109,CardType::Normal(12,1),None,Some("Trash another card in hand for 1 coin".to_owned())),
       (110,CardType::Normal(12,2),Some("Trash another card in hand for 1 coin".to_owned()),None),
       (111,CardType::Normal(12,3),None,Some("Keep or discard 3 cards".to_owned())),
       (112,CardType::Normal(12,4),Some("Trash another card in hand for 1 coin".to_owned()),None),
       (113,CardType::Normal(12,5),None,Some("Double adjacent cards".to_owned())),
       (114,CardType::Normal(12,6),None,Some("Double adjacent cards".to_owned())),
       (115,CardType::Normal(12,7),None,Some("Trash another card in hand for 1 coin".to_owned())),
       (116,CardType::Normal(12,8),Some("Trash another card in hand for 1 coin".to_owned()),None),
       (117,CardType::Normal(13,0),None,Some("Double adjacent cards".to_owned())),
       (118,CardType::Normal(13,1),None,Some("Trash another card in hand for 1 coin".to_owned())),
       (119,CardType::Normal(13,2),Some("Double adjacent cards".to_owned()),Some("Trash another card in hand for 1 coin".to_owned())),
       (120,CardType::Normal(13,3),None,None),
       (121,CardType::Normal(13,4),Some("Trash another card in hand for 1 coin".to_owned()),None),
       (122,CardType::Normal(13,5),Some("Trash another card in hand for 1 coin".to_owned()),None),
       (123,CardType::Normal(13,6),Some("Trash another card in hand for 1 coin".to_owned()),None),
       (124,CardType::Normal(13,7),None,Some("Trash another card in hand for 1 coin".to_owned())),
       (125,CardType::Normal(13,8),None,Some("Double adjacent cards".to_owned())),
       (126,CardType::Normal(14,0),None,Some("Trash another card in hand for 1 coin".to_owned())),
       (127,CardType::Normal(14,1),Some("Double adjacent cards".to_owned()),None),
       (128,CardType::Normal(14,2),Some("Trash another card in hand for 1 coin".to_owned()),None),
       (129,CardType::Rotatable(14,3,27,7),None,Some("Trash another card in hand for 1 coin".to_owned())),
       (130,CardType::Normal(14,4),None,None),
       (131,CardType::Normal(14,5),Some("Double adjacent card".to_owned()),Some("Trash another card in hand for 1 coin".to_owned())),
       (132,CardType::Normal(14,6),None,Some("Double adjacent card".to_owned())),
       (133,CardType::Rotatable(14,7,27,5),None,Some("Trash another card in hand for 1 coin".to_owned())),
       (134,CardType::Normal(14,8),Some("Trash another card in hand for 1 coin".to_owned()),None),
       (135,CardType::Rotatable(15,0,28,6),None,None),
       (136,CardType::Rotatable(15,1,28,3),None,Some("Trash another card in hand for 1 coin".to_owned())),
       (137,CardType::Normal(15,2),Some("Trash another card in hand for 1 coin".to_owned()),None),
       (138,CardType::Normal(15,3),Some("Double adjacent card".to_owned()),Some("Trash another card in hand for 1 coin".to_owned())),
       (139,CardType::Normal(15,4),Some("Trash another card in hand for 1 coin".to_owned()),None),
       (140,CardType::Normal(15,5),None,None),
       (141,CardType::Normal(15,6),None,None),
       (142,CardType::Normal(15,7),None,None),
       (143,CardType::Normal(15,8),None,None),
       (144,CardType::Normal(16,0),None,None),
       (145,CardType::Normal(16,1),None,None),
       (146,CardType::Normal(16,2),None,None),
       (147,CardType::Normal(16,3),None,None),
       (148,CardType::Normal(16,4),None,None),
       (149,CardType::Normal(16,5),None,None),
       (150,CardType::Normal(16,6),None,None),
       (151,CardType::Normal(16,7),None,None),
       (152,CardType::Normal(16,8),None,None),
       (153,CardType::Normal(17,0),None,None),
       (154,CardType::Normal(17,1),None,None),
       (155,CardType::Normal(17,2),None,None),
       (156,CardType::Normal(17,3),None,None),
       (157,CardType::Normal(17,4),None,None),
       (158,CardType::Normal(17,5),None,None),
       (159,CardType::Normal(17,6),None,None),
       (160,CardType::Normal(17,7),None,None),
       (161,CardType::Normal(17,8),None,None),
       (162,CardType::Normal(18,0),None,None),
       (163,CardType::Normal(18,1),None,None),
       (164,CardType::Normal(18,2),None,None),
       (165,CardType::Normal(18,3),None,None),
       (166,CardType::Normal(18,4),None,None),
       (167,CardType::Normal(18,5),None,None),
       (168,CardType::Normal(18,6),None,None),
       (169,CardType::Normal(18,7),None,None),
       (170,CardType::Normal(18,8),None,None),
       (171,CardType::Normal(19,0),None,None),
       (172,CardType::Normal(19,1),None,None),
       (173,CardType::Normal(19,2),None,None),
       (174,CardType::Normal(19,3),None,None),
       (175,CardType::Normal(19,4),None,None),
       (176,CardType::Normal(19,5),None,None),
       (177,CardType::Normal(19,6),None,None),
       (178,CardType::Normal(19,7),None,None),
       (179,CardType::Normal(19,8),None,None),
       (180,CardType::Normal(20,0),None,None),
       (181,CardType::Normal(20,1),None,None),
       (182,CardType::Normal(20,2),None,None),
       (183,CardType::Normal(20,3),None,None),
       (184,CardType::Normal(20,4),None,None),
       (185,CardType::Normal(20,5),None,None),
       (186,CardType::Normal(20,6),None,None),
       (189,CardType::Normal(20,7),None,None),
       (190,CardType::Normal(20,8),None,None),
       (191,CardType::Normal(21,0),None,None),
       (192,CardType::Normal(21,1),None,None),
       (193,CardType::Normal(21,2),None,None),
       (194,CardType::Normal(21,3),None,None),
       (195,CardType::Normal(21,4),None,None),
       (196,CardType::Normal(21,5),None,None),
       (197,CardType::Normal(21,6),None,None),
       (198,CardType::Normal(21,7),None,None),
       (199,CardType::Normal(21,8),None,None),
       
   }
}
#[derive(Clone,Copy,PartialEq,Debug)]
pub struct SpriteInfo {
    pub first: (f64, f64), //left corner of first
    pub num_in_row: f64,
    pub w_h: (f64, f64),
    pub pad: (f64, f64, f64, f64),
}
impl SpriteInfo {
    pub fn src_rect(&self, index: f64) -> ([f64; 2], [f64; 2]) {
        let s = self;
        let (x, y) = (index % s.num_in_row as f64, (index / (s.num_in_row)).floor());
        ([s.first.0 + x * s.w_h.0 + s.pad.0, s.first.1 - y * s.w_h.1 - s.pad.2],
         [s.first.0 + (x + 1.0) * s.w_h.0 - s.pad.1, s.first.1 - (y + 1.0) * s.w_h.1 + s.pad.3])

    }
}
